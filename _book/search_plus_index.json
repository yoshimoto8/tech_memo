{"./":{"url":"./","title":"Introduction","keywords":"","body":"whit is this repository? This is repository to written my record of tech. "},"docs/Collected_article/name_variable.html":{"url":"docs/Collected_article/name_variable.html","title":"変数名ノート","keywords":"","body":"変数名ノート 変数名・関数名の付け方についての個人的ルール "},"docs/Collected_article/react.html":{"url":"docs/Collected_article/react.html","title":"React記事まとめ","keywords":"","body":"React記事まとめ 最近のフロントエンドのコンポーネント設計に立ち向かう "},"docs/Collected_article/read_source_code.html":{"url":"docs/Collected_article/read_source_code.html","title":"ソースコードを読むための技術ノート","keywords":"","body":"ソースコードを読むための技術ノート 静的な解釈の仕方 対象プログラムを使う ドキュメントを読む ディレクトリ構造を読む ファイル構造を読む 略語の調査 データ構造を読む 関数同士の呼び出し関係を把握する 関数を読む 好みに書き換えてみる 書き換えて動かす 名前の大切さ 変数名や関数名はプログラムを表す重要な武器である。これを意識することによって大分効率が違う。 私のコードリーディング術 1 年目から身につけたい！ チーム開発 6 つの心得 コード リーディングについて 太一のコードの読み方メモ コードリーディングについて ソースコードを効率よく読むには(1) ソースコードを読むための技術 ソースコードを効率よく読むには(2) "},"docs/Command/Gitbook/1.html":{"url":"docs/Command/Gitbook/1.html","title":"Herokuにgitbookをデプロイする","keywords":"","body":"Herokuにgitbookをデプロイする expressをインストール yarn add express index.jsを作成 var express = require('express'); var app = express(); app.use(express.static(__dirname + '/_book')); app.listen(process.env.PORT || 3000); Procfile Procfileを作成します。次の内容を入力して保存します。 web: node index.js Herokuにログイン heroku login herokuにプロジェクトを作成 heroku create demo Herokuにプッシュ $ git init $ git add . $ git commit -m 'demo' $ git push heroku master ブラウザで確認 heroku open "},"docs/Command/Gitbook/2.html":{"url":"docs/Command/Gitbook/2.html","title":"2.md","keywords":"","body":"[gitbookで技術書を書く環境の構築手順] (http://takemikami.com/2017/02/14/gitbook.html) "},"docs/Command/Github/1.html":{"url":"docs/Command/Github/1.html","title":"GitHubで使う用語集","keywords":"","body":"GitHubで使う用語集 変更を取り消す git checkout HEAD . "},"docs/Command/Google/1.html":{"url":"docs/Command/Google/1.html","title":"グーグルショートカットキー","keywords":"","body":"グーグルショートカットキー できること コマンド Command + L 検索にカーソルを合わせる Command + [ 前のページへ戻る Command + ] 前のページへ進む Command ＋ N 新しいウィンドを開く 参照 https://boxil.jp/mag/a1790/ "},"docs/Command/Rubymine/rubymine.html":{"url":"docs/Command/Rubymine/rubymine.html","title":"エディタまとめ記事","keywords":"","body":"エディタまとめ記事 【翻訳】絶対見逃せない！RubyMine のショートカット 10 選 RubyMine のコードジャンプ機能は本当にすごい！！困ったときは Command+B を押すべし！ 【Ruby 初心者向け】テキストエディタ、ちゃんと設定できてる？使いこなせてる？チェックリスト 10 項目 RubyMine が気になる人に捧ぐ、ざっくり入門編 RubyMine の設定・使い方 RubyMine と RuboCop を連携させる https://qiita.com/mnuma/items/1c0e4c54b070e0a2307b rubyMine これだけ見れば完璧 RubyMine Advent Calendar 2014 "},"docs/Command/Rubymine/shortcutkey.html":{"url":"docs/Command/Rubymine/shortcutkey.html","title":"RubyMineのショートカットキー一覧","keywords":"","body":"RubyMineのショートカットキー一覧 "},"docs/English/git_commit.html":{"url":"docs/English/git_commit.html","title":"Githubで英語を使うまとめ","keywords":"github commit etc.","body":"Githubで英語を使うまとめ 単語 単語 意味 undesirable 好ましくない avoid, circumvent 回避する retrieve 取りに行く(fetch / 「受け取る」よりもっと能動的に「取りに行く」ニュアンスを示す) revise = fix tweak 微調整する in the sight of 〜 〜の視点で (point of view をわざと仰々しく言った感じ) refer 参照する disambiguate 曖昧さをなくす quite とても（very のかわりにつかえる literally 文字通り exactly まさに、確かに、イグザクトリー resurrect よみがえらせる in favor of 〜に賛成して, 何かに沿って get rid of 好ましくないものを取り除く kick out get rid of の強いバージョン、腹立たしさある introduce 導入する extract 抽出する no longer used もはや使われてない R.I.P. 安らかに眠れ（もう使ってないコードを消す時などに。「Remove では語りきれない思いがあるんだ」 by @idesaku ） defeat 倒す、打ち負かす :put_litter_in_its_place::put_litter_in_its_place: ゴミはゴミ箱へ（不要なコメントや whitespace を消したときなど） cosmetic change, cosme インデントを美しくした時など fruitful みのりの多い〜, fruitful discussion など :golf::golf: コードをより短くした（code golf） Take a cup of coffee JS を CoffeeScript 化した, または Coffee をより Coffee らしく書いた kick in 効きはじめる, 適用される など（DHH が使っていたらしい。） A in B out B の変わりに A を導入（サッカー的な感じ。Gem の差し替えなどに使う） enable to work 動くようにした wipe out 拭い去る（get rid of, kick out の亜種） stop rendering 〜 〜を表示しない aesthetic cosmetic の亜種（多分） Ooops! :scream: しょうもないミスした時などに。 :scream_cat: :scream_cat: 使うとかわいみでる。 ChangeLog を支える英語 ChangeLog を書く際によく使われる英語をまとめました。 ほとんど引用です。 基本形 基本的な文法です。あとは単語を知っていれば大体なんとかなるそうです。 大文字で始める Fix possible memory leak Removed obsolete username_max_length ピリオドをつけない Changed A to B Upgraded A to version 1.0 動詞の過去形で始まる「～を…しました」形 Fixed a performance regression （パフォーマンスが低下するバグを修正しました） 「～は…するようになります」形 now + 動詞の過去分詞。仕様変更などの際に使いましょう。 Minimized pages are now hidden （最小化したページは今後は隠されるようになります） 名詞句のみ 「～（という）こと」的な。 Many usability improvements （多くのユーザビリティの向上） ちょっと便利ないいまわし 慣れてきたら少々のエスプリをきかせましょう。 ときどき（時々） a possible を使う。 a possible crash. （ときどきクラッシュする） a possible null pointer dereference. （ときどきヌルポする） 不具合 致命的ではない不具合には issue を使う。 the stability issue. （不安定になる不具合） よく使う動詞 新規追加 add, added Added support for bridgeless SLI with GeForce 8 GPUs 改善 improve, improved Improved device handling 変更 change, changed Changed A to B 修正 modify, modified Modified IPv6 default listen address バグフィックス fix, fixed Fixed a bug in test.t 削除 remove, removed Removed a dependency to Huge::Module 取り消し（巻き戻し） revert, reverted Revert the 'require' in command.cmd to do 'do' 更新 update, updated Updated docs for new-features options Win7 -> Win7-SP1 拡張（機能追加などをともなう） upgrade, upgraded upgraded to 1.0 Win7 -> Win8 有効／無効 enable, enabled / disable, disabled Enabled type checking of the app in MyApp::sub 拡張 extend, extended 強化、向上 enhance, enhanced 実装 implement, implemented Implemented app.streaming in all blocking servers リファクタ refactor, refactored Refactored MyApp 最適化 optimize, optimized Optimized a process 削減、切り詰め reduce, reduced Reduced kernel virtual memory usage with some GeForce 8 GPUs 微調整 tweak, tweaked Tweaked labels of graph metrics 対応 suppor, supported Supported the new format. 冠詞(a, the, any, some) a, the それと別物を置き換えても文章が成り立つ場合。 どれでもいいのが a それでないと文章が成り立たない場合。 それじゃないと駄目なのが the だから乞食は\"Would you give me a quarter.\"(25 セントくれ)と言うのに、取引では\"Give me the money.\"(その金よこせ)と言うわけです....というのは半分冗談ですが、そういうことです。 OOP(Object Oriented Programming)で言うと、a がクラス(class)で the がインスタンス(instance)だ。 any, some any => a, some => the ♪Help! I need somebody ♪Help! Not just anybody 注意事項 固有名詞には the をつけない 固有名詞: 人名や地名等、それ以外には存在しない特定の対象を表す名詞 Taro, Tokyo, Japan 作品紹介では a を使う Spirited Away' is a Miyazaki film. The movie won the Academy Award in 2001. It's a Sony 以下列挙 （例は実際の同僚や OSS 上でのコミットメッセージです.） Add A to B A をB に加える Add ambiences to admin_notify_organizer_new_event email. Remove A from B B からA を取り除く Remove config/database.yml from git index and add it to gitignore. Move A from B to *C A をB から*C に動かす Move admin_notify_venues_shortlisted email from LeadMailer to AdminMailer. Replace A with B A をB に取り替える Replace the elaborate reloading connection checking scheme, just fix the Ruby-based MySQL adapter, ye? Make A B A をB にする、させる Make javascript_include_tag :default behave correctly with application.js Make counter_cache work with polymorphic belongs_to Change A to B A をB に変更する. Change a to an for HTML word [ci skip] Update A to B A をB に更新する Update edge to script.aculo.us to 1.7.1_beta3 Ensure *A *A である事を確実にする. that 節とよく使うぽい. Ensure that request.path never returns nil. Use *A *A を使う. 単体で用いるよりも instead of や for の前置詞（下部で述べる）とよく使うっぽい Use `Base.strict_decode64` instead of `Base.decode64` just as we do in encoding; Fix *A *A を直す Fix saving reject_reason when rejecting lead. その他比較的頻度の高かった動詞 上記が題意となる頻出動詞１０です. 以下はその他比較的頻度の高かった動詞です. Refactor Refactor RoutesReloader a bit to avoid creating extra hash objects Improve Improved the silence method on the logger to ensure restoring the old level Extract Extract InflectorTestCases so both inflector and string inflections tests can use them. Deprecate Deprecate using method_missing for attributes that are columns. Avoid Avoid empty transaction from setting has_one association on new record. Simplify Simplify Preloader#grouped_records code. Define Define the Duration#instance_of? method Allow Allow use of assert_template with the :file option. Switch from A to B Switch from SHA2 to BCrypt Implement Implement #== for column Clean up Clean up JobWrappers::ResqueWrapper.perform Enable Enable memcached service on travis for running cache tests. Sorting A by B Sort migrations by the migration ID. Rewrite Rewrite Account Setting page from ERB to HAML. Support Support multiple config.after_initialize blocks so plugins and apps can more easily cooperate. Stop, Prevent Stop relying on columns in sqlite quoting tests Drop Drop variable assignment in validations 前置詞（上記の動詞に情報を付加するもの） with *P *P と一緒に、伴って Fixed error with 'rails generate new plugin'. for *P *P のために Add a simple API for fetching a list of entries from the cache instead of *P *P の代わりに Use `Base.strict_decode64` instead of `Base.decode64` just as we do in encoding; in *P *P の、で Use strong_params in example at *P *P の、で Revert \"log at debug level what line caused the redirect_to\" as *P *P として Stop messing up with instance variables, use protected as it was meant for 頻出動詞 TOP20 順位 英単語 意味 出現回数 1 fix/fixed/fixes 修正する 165084/35773/19813 2 add/added 追加する 141711/35282 3 remove/removed 取り除く 81124/12528 4 use 用いる 75767 5 update/updated 更新する 57004/11761 6 support サポートする 43808 7 merge マージする 34762 8 make 作成する 31425 9 move 移動させる 22208 10 don't しない 21431 11 check チェックする 16882 12 change 変更する 14594 13 allow 許す 14352 14 cleanup/clean 一掃する 12217/8405 15 set セットする 13132 16 convert 変換する 11633 17 rename リネームする 10703 18 do する 10028 19 revert リバートする 9268 20 avoid 避ける 8822 シンプルな単語が多いようです。 modify が入っていないのは意外でした。20 位以降は、improve や、handle、replace などの動詞が続きます。 しかし、動詞が分かっただけでは、英語でコメント書けませんよね。 これらの動詞とセットでよく用いられる単語を分析してみます。 頻出動詞とセットでよく用いられている単語とコメント集 頻出動詞とセットで用いられた単語、それぞれ TOP10 を解析し、 その中から、有用な組み合わせと実際のコメントを列挙していきます。 1 位.fix 単語のセット 代表例 意味 実際のコメント fix,in Fix A in B B の箇所の A を修正 Fix typo in docs fix,for Fix for A A に対する修正 fix for #4183 fix,to Fix A to B B への A を修正 Fix link to the spec fix,of Fix A of B B の A を修正 fix location of favicon fix は、いろいろな前置詞と用いられています。 fix だけではないのですが、for の後には、issue の ID などがよく用いられています。 2 位.add 単語のセット 代表例 意味 実際のコメント add,to Add A to B B に A を追加 add .js to import add,for Add A for B B 用に A を追加 Add test for bug #3116 add は、to がよく用いられています。 3 位.remove 単語のセット 代表例 意味 実際のコメント remove,from Remove A from B B から A を除去 Remove Debug from tests remove,in Remove A in B B の箇所の A を除去 Remove duplication in render function remove,unused Remove unused A 不必要な A を除去 Remove unused code unused は remove に限らず使えそうです。 4 位.use 単語のセット 代表例 意味 　実際のコメント use,to to use A A を用いるために Change syntax to use dots use,of Use A instead of B B の代わりに A を用いる Use ++ instead of += 1 use,in Use A in B B の箇所の A を用いる Use stub in testing. use,for Use A for B B のために A を用いる use Ruby for mocking use,remove Remove use of B B を用いるのを除去 Remove use of deprecated method use は、不定詞として用いられていていました。 また、名詞としても用いられていますね。instead of は、use に限らず使えそうです。 5 位.update 単語のセット 代表例 意味 　実際のコメント update,to Update to A Update A to B A にアップデートA を B にアップデート Update to Unicode 6.3.0Update Modernizr to v1.6 update,for Update A for B B に対して A をアップデート update History.md for #1563 6 位.support 単語のセット 代表例 意味 　実際のコメント support,add Add A supportAdd support for A A サポートを追加A に対するサポートを追加 Add Travis CI SupportAdd support for callbacks support は、名詞的にも使われていることが多いようです。 8 位.make 単語のセット 代表例 意味 　実際のコメント make,of Make use of A A を使用する make use of Ember.isNone explicit in Ember.isEmpty make,it Make it AMake it A の比較級 A にするより A にする(A には、possible,simple,easy,clear など) Make it possible to have IDs per request Make it easy to check platform requirements in a commandMake it easier to debug the release script make,sure Make sure to AMake sure (that) A 必ず A するようにする Make sure to reset default_url_optionsMake sure all packages rebuild. make 単体では、Make A B といった、A を B にするという形式がよく用いられますが、 他の単語との組み合わせで見てみると、Make it possible,Make it easier などの使い方がされています。 9 位.move 単語のセット 代表例 意味 　実際のコメント move,from Move A from B B から A を移動させる Move fix_fname from buffer.c move,to Move A to B A を B に移動させる Move strings to strings.js move,in Move A in B B 内の A を移動させる Move quotes in nav-main.html 10 位.don't 単語のセット 代表例 意味 　実際のコメント don't,use Don't use A A を用いない Don't use \"assert_not_nil\" don't は、様々な動詞と用いられますが、use が多く用いれていました。 11 位.check 単語のセット 代表例 意味 　実際のコメント check,for Check for A A に対するチェック Check for weak dependency correctly. check,in Check A in B B 内の A をチェック check ID in os-release instead chcek,fix Fix A check A チェックを修正 Fix html extension check check,add Add A check A チェックを追加 Add null check remove,check Remove A check A チェックを除去 remove useless nil check check は、結構名詞的な使われ方もしていて、if 文の修正によく使われているようです。 12 位.change 単語のセット 代表例 意味 　実際のコメント change,to Change A to BChange to B A を B に変更B に変更 Change copyright to 2013change to lazy Unmount change,for Chage A for B B に対して A を変更 Change API for sending handles change,in Change A in B B 中の A を変更 change rm usage in docs 13 位.allow 単語のセット 代表例 意味 　実際のコメント allow,to Allow A to B A が B するのを許す Allow the user to drag faster 15 位.set 単語のセット 代表例 意味 　実際のコメント set,to Set A to B A を B にセット Set default kernel to Gaussian. set,for Set A for B B に対して A をセット Set release date for 0.10.1 16 位.convert 単語のセット 代表例 意味 　実際のコメント convert,to Convert A to BConvert to B A を B に変換B に変換 convert time to stringconvert to boolean 17 位.rename 単語のセット 代表例 意味 　実際のコメント rename,to Rename A to B A を B にリネーム Rename hero.html to jumbotron.html 20 位.avoid 単語のセット 代表例 意味 　実際のコメント avoid,to Avoid A to Bto avoid A B するために A を避けるA を避けるために avoid method call to compactRemove methods to avoid warnings. 動詞単体では, Avoid A や、Avoid ~ing でよく用いられています。 18 位の do は、主に do not で用いられていたため省略しています。 7 位の merge、13 位の cleanup、19 位の revert はセットでよく使われている単語はあまり出てきませんでした。 解析方法 データの収集 github 上のリポジトリから、一括でコミットメッセージを取得するのには以下のプログラムを参考にしました。 参考 URL https://github.com/minamijoyo/commit-crawler github API のアクセストークンを登録するだけで、一括でコミットメッセージを取得することができます。 解析と可視化 英語のコミットメッセージなので、日本語とは違いスペースで区切るだけで簡単に単語ごとに分解できます。 分解した単語の出現頻度をカウントするプログラムを python で書きました。 ただ単純に頻度の多い単語を分析していっても、a や the などの意味のない単語が多いので、ある程度絞る必要があります。自然言語処理のライブラリである nltk を用いて、品詞の分析をし、名詞と動詞の抽出しました。抽出した結果のワードクラウド表示は、以下の参考 URL で簡単にできました。 参考 URL 英語前処理サーベイ nltk と pytagcloud で英語のワードクラウド 感想 github 上のコメントは解析してみると、シンプルな単語が用いられており、 小難しい単語はあまり見受けられません。 中学校で習う単語と文法ばかりですし、書くときは考えすぎずに書いてよさそうです。 ちなみに、「Yes」や、「Oops」だけのコメントもあったりします。笑 分析に関して Merge Branch や Merge pull request などの github が自動で生成するようなコメントは除いています。しかし、リポジトリごとに特有のコミットメッセージが存在 また、use や、support などは名詞としても用いられるため、動詞の用法としての順位は変わってくる可能性が大いにあります。 今回は行いませんでしたが、形容詞や副詞に関して分析するのも面白そうです。 ということで、番外編に結果を載せたいと思います。 (番外編 1)頻出形容詞 TOP20 順位 英単語 意味 実際のコメント 1 new 新しい New URL. 2 unused 使用されていない Remove unused $$ 3 static 静的な Build static executable. 4 empty 空の Add empty line 5 old 古い Fix old links 6 small 小さな Small typo 7 initial 最初の Initial commit 8 local ローカルの Updates local dev guide 9 wrong 間違った Fix wrong id 10 common 共通の Optimize the most common resolver case. 11 other 他の Change other example fields 12 dead 死んだ Remove dead link 13 rid (get rid of で)取り除く get rid of EmptyComponent 14 possible 可能性のある possible regression fix 15 unneeded 不必要な Remove unneeded @ 16 same 同じ Use same colors for disabled buttons 17 global グローバルの Fix global leaks 18 invalid 不正な Fix invalid timer test 19 specific 特定の Remove linux specific calls 20 extra 余分な Remove extra whitespace 簡単な英単語ばかりですね。 rid は、get rid ofでよく使われるようです(形容詞ではないですが)。 また、possibleは 「possible + (何か悪いこと、例えば crash や memory leak など)を修正する」という文脈で使われていました。他にも、if possible (文末に付けて: 可能なら)や、as early as possible(できるだけ早く)、make it possible(可能にする)などで使われていました。 ちなみに、enable,variable,disable,clear,separate も入っていましたが、形容詞以外の使われ方の方が多いようなので除いています。 (番外編 2)頻出名詞 TOP20 名詞も並べてみます。タイポ多いですね。笑 順位 英単語 意味 出現回数 1 test/tests テスト 30306/20073 2 code コード 25839 3 error エラー 22700 4 function/functions ファンクション 14464/9640 5 driver ドライバー 14386 6 version バージョン 13231 7 typo タイポ 12167 8 docs ドキュメント 11865 9 bug バグ 11518 10 return リターン 11296 11 tag タグ 14352 12 default デフォルト 10556 13 device デバイス 10381 14 handling ハンドリング 10147 15 files ファイル 9195 16 type タイプ 9166 17 auto オート 9268 18 name 名前 8765 19 data データ 8511 20 warning 警告 8448 略語 元の語 意味 AFAICT As far as I can tell 分かる限りでは ○○ AFAIK As far as I know 知る限りでは ○○ AKA, aka, a.k.a. Also known as ○○ としても知られる ASAP As soon as possible できる限り早く BTW By the way ところで c.f., cf. ラテン語 confer / 英語 compare ○○ を参照 e.g., E.g. ラテン語 exempli gratia / 英語 for example たとえば ETA Estimated time of arrival （作業の）完了予定時刻　（用例はコメントを参照） FTW For the win 〔何か良い案を挙げて〕これで決まり；これでよし FWIW For what it's worth 役に立つかどうかは分からないが FYA For your action 要対応；要返信 FYI For your information 参考；ご参考までに HTH Happy to help （用例はコメントを参照） idk, IDK I don't know 知らない；分からない i.e., I.e. ラテン語 id est / 英語 that is すなわち IIRC If I remember [recall] correctly 記憶が正しければ ○○ IIUC If I understand correctly 〔相手の発言を受けて〕私の理解が正しければ IMO, IMHO In my (humble) opinion 〔ていねいに〕○○ だと思います LGTM Looks good to me 〔提案に対して〕いいと思う；問題ないと思う；〔コードレビュアーが、問題ないコードに対して〕レビュー終了；（コードの）承認 LOL, lol Laugh out loud 〔くだけて〕www；（笑） NA, N/A Not applicable; not available 〔表などで、項目の組み合わせが無効な欄に記載して〕該当なし；〔表などで、まだ値がない欄に記載して〕該当値なし NB, N.B. ラテン語 nota bene / 英語 note well 〔通例コメントの先頭で〕特に注意せよ NP, np No problem 〔依頼・謝罪などに対してくだけて〕（問題ないから）気にしないで；大丈夫〔感謝に対してくだけて〕どういたしまして OTOH On the other hand もう一方では、これに反して PTAL Please take another look 〔再レビューの要求などで〕再度ご確認ください PR Pull request プルリクエスト RFC Request for comments 〔おもに issue のタグとして〕意見募集 ROFL, rofl Rolling on the floor laughing 〔くだけて〕www；（笑） RTFM Read the fucking manual 〔乱暴に〕マニュアルを読め TBA To be advised あとで連絡する TBA To be announced あとで発表する TBD To be determined あとで決める TBW To be written あとで書く TLDR, tldr, TL;DR, tl;dr, TL/DR, tl/dr Too long, didn't read 長すぎるので読んでいない；（長い文を読みたくない人向けの）要約 UTSL Use the source, Luke 〔くだけて〕ソースを読め（スター・ウォーズのセリフとかけた言葉遊び） w/ with （with の省略形） w/o without （without の省略形） WIP Work in progress 作業中 wrt, w.r.t., WRT With regard [respect, reference] to 〜に関して言えば WTF, wtf What the fuck 〔想定外の事・ものにくだけて〕なんてこった；どうすりゃいいんだ；マジかよ XD 顔文字：90 度右に回すと、目をつぶって大きく口を開けた笑顔に見える 〔くだけたコメントで〕(≧▽≦) おまけ ソフトウェアのバージョン： 略語 元の語 意味 LTS Long-term Support 長期サポート対象版 GA General availability 一般向け提供；正式リリース版 GM Golden master （CD プレスの）原盤；正式リリース版 RTM Ready to manufacturing 量産可能；正式リリース版 RC Release candidate リリース候補版 ES Engineering Sample 機能評価版 慣用表現： 語 直訳 意味 Bikeshed, Bikeshedding 自転車置き場 重要でない議論に時間を取られること（家のペンキを塗り終える前に自転車置き場を何色で塗るか揉めることから） Yak shaving ヤクの毛刈り ある大きな問題を解決するために、 一見無関係な小さい問題をいくつも片付けること。転じて、大きな問題を解決するつもりが、一見関係しているように見えて実は無用な小さい問題に気を取られること（長く固いヤクの毛を刈ってウールにするには多くの下準備が必要なことから） コミットメッセージを書く Japanese English A を実装しました Implement A 機能(クラス)B に A を実装しました Add A to B 機能(クラス)B の A をリファクタリングしました Refactor A in B A を B から C に変更しました Change A from B to C A でなく B を使うようにしました Replace A with B 機能(クラス)A のテストを追加しました Add test for A 機能(クラス)A の失敗していたテストを修正しました Fix broken A tests 依存ライブラリ A をバージョン x.y.z に上げました Update A to x.y.z ファイル A 中の誤字を修正しました Fix typo in A 〜のとき〜するバグを修正しました Fix the problem where 〜 when 〜 機能(クラス)A について、B にも対応しました Support B in A ドキュメント A の B に関する記述を修正しました Improve B in A A で発生するエラーメッセージを見直しました Improve error message thrown in A バージョン x.y.z をリリースしました Release x.y.z 本当は避けたほうが良いが、細かい修正をまとめてコミットするときのコメント用例 Japanese English 依存ライブラリのバージョンを諸々更新しました Update dependencies 雑多なコードフォーマット修正・可視性の修正をしました Polish コンパイル・静的解析の警告を出ないように修正しました Clean up 問い合わせる Japanese English 〜する予定はありますか? Do you have any plans to 〜 ? (このプロダクトを使って)〜することはできますか? Is there any way 回避策ありませんか? Is there a workaround? ～してないのって、何か理由ありますか? What is the reason for not ～? 設定/実装例がほしいです Could you provide an example please? どうぞよろしくお願いします Thanks in advance. 〜すると NullPointerException がでます We get NPE when 〜 このドキュメントを日本語に翻訳してもいいですか? Can I translate the docs to Japanese? クローズしちゃっていいですか? Can I close this? バージョン x.y.z でも、まだこのバグ潰れてないです I still encounter this bug with x.y.z. 問合せに答える Japanese English 再現できないですねぇ… I'm afraid I can't reproduce the error you're seeing. もうちょっと情報ください You'll need to provide a little more information than that. スタックトレースはありませんか? Could you provide a stack trace? そこがまさに問題なんです That's exactly the problem. お礼をいう Japanese English とても勉強になりました I think I've learned a lot. オッ、分かりました! I see now. フィードバックありがとう Thanks for the feedback. 何か他にもありましたら、よろしくお願いします You're more than welcome to contribute. もし解決できたら、プルリク送ってください If you are able to resolve this, we would encourage you to send a pull request. ちゃんと動きました! It's working as expected. 引用元 Changelog のための英文テンプレート集 - ぴょぴょぴょ？ - Linux とかプログラミングの覚え書き - 辞書で引けない技術英語 ChangeLog でよく使う表現 404 Blog Not Found:プログラマーでなくてもわかる a と the の違い a と the の話: 極東ブログ 英語でコミットを書こう コミットメッセージの書き方 - ククログ(2012-02-21) わかりやすいコミットメッセージの書き方 - ククログ(2013-04-24) なぜ太陽は Sun ではないか　固有名詞にも区別がある | ごきげんようチャンネル 日本人ため「a」と「the」の違い | 外国語を学習するなら Lang-8 Awesome Commit English Abbreviations.com - Computing Abbreviations Acronym Finder GitHub English Challenge Cheat Sheet "},"docs/English/github_vocabulary.html":{"url":"docs/English/github_vocabulary.html","title":"githubでよく使われる単語","keywords":"","body":"githubでよく使われる単語 単語 意味 例文 This This This column column column will will will be be be left right center aligned aligned aligned "},"docs/Flow/Flow_document/what_is_javascript.html":{"url":"docs/Flow/Flow_document/what_is_javascript.html","title":"flow の説明","keywords":"","body":"flow の説明 flow は javascript のための静的タイプをチェックします。静的タイプチェックをすることによって、コードを書くことが早くなったりコードに対して信頼が高まるのであなたの生産性を上げてくれます。 flow は静的タイプアノテーションを通して、どのようにコードが振舞って欲しいかや以下のコードのように確認してくれます。 // @flow function square(n: number): number { return n * n; } square(\"2\"); // Error! flow は javascript のことをよく知っているので、多くの type を必要としません。最低限必要な flow のコードだけ済み、残りの部分を推論してくれます。flow はコードを全くなしで理解してくれます。 // @flow function square(n) { return n * n; // Error! } square(\"2\"); また flow は少しずつ適用することもでき、いつでも取り除くことができます。なので flow がどのように動くのかを見て見ましょう。 next "},"docs/Flow/Flow_learn/union_type.html":{"url":"docs/Flow/Flow_learn/union_type.html","title":"Union Typeを極める","keywords":"","body":"Union Typeを極める union type union type は if 文を使って条件分岐をしないといけない。 // あとで書く type type1 = string type type2 = number const string = 'test' const test: type1 | type2 = オブジェクトのプロパティが違う場合はそれを使って条件分岐をしないといけない。 javascript "},"docs/JavaScript/library_version_up.html":{"url":"docs/JavaScript/library_version_up.html","title":"package.jsonのパッケージのバージョンをあげる","keywords":"","body":"package.jsonのパッケージのバージョンをあげる インストールしたパッケージに新しいバージョンが存在するかどうか、確認する。コマンド $ npm outdated 参照 npm-check-updates を使う versionを調べる ncuでバージョンの一覧を見ることができる ncu package.jsonのversionsをすべて最新にする -u でpackage.jsonのパッケージを一括あげる ncu -u パッケージを選択する １つ選択してバージョンをあげることが可能。 ncu -u [パッケージ名] "},"docs/Markdown/markdown2.html":{"url":"docs/Markdown/markdown2.html","title":"マークダウン表","keywords":"","body":"マークダウン表 雛形 | Left align | Right align | Center align | |:-----------|------------:|:------------:| | This | This | This | | column | column | column | | will | will | will | | be | be | be | | left | right | center | | aligned | aligned | aligned | "},"docs/Rails/matomeru.html":{"url":"docs/Rails/matomeru.html","title":"Railsの記事まとめ","keywords":"","body":"Railsの記事まとめ コレクションを積極的に使おう map とか reduce とか いい感じにメソットを切り出す https://techracho.bpsinc.jp/hachi8833/2018_06_07/57510 by: unlessはここぞというときまで使わないこと（翻訳） https://techracho.bpsinc.jp/hachi8833/2018_06_01/56980 Ruby: フラグ引数は「コードの臭い」（翻訳） https://techracho.bpsinc.jp/hachi8833/2018_05_28/56167 Rails tips: RSpec テストの高速化/リファクタリングに役立つ 4 つの手法（翻訳） https://techracho.bpsinc.jp/hachi8833/2018_05_16/55546 Good Ruby Idiom: and/or operators https://zverok.github.io/blog/2016-02-23-control-flow.html Extract conditionals into well-named methods https://andycroll.com/ruby/extract-conditionals-into-well-named-methods/ コントローラーを薄くして,モデルを厚くしべし Railsでやってしまいがちな保守性を下げてしまうコードとその解決策 https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc 実務で学んだRailsのコーディングパターン https://qiita.com/yoshi_ksk/items/08ee0e4230893a770cce 中／大規模開発のためのRails設計パターン https://qiita.com/ktsujichan/items/2899d337ecbd90474c46 Railsのファットモデル問題に対処する前に読んでほしい記事 https://qiita.com/klriutsa/items/8d7381f437c225c64a5f "},"docs/Rails/refactoring/Derimeru_violation.html":{"url":"docs/Rails/refactoring/Derimeru_violation.html","title":"デメテルの法則を違反したコード","keywords":"","body":"デメテルの法則を違反したコード 参照 https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc "},"docs/Rails/refactoring/Duck_typing.html":{"url":"docs/Rails/refactoring/Duck_typing.html","title":"ダックタイピングを活かしていないコード","keywords":"","body":"ダックタイピングを活かしていないコード 参照 https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc "},"docs/Rails/refactoring/bad_readable_callback.html":{"url":"docs/Rails/refactoring/bad_readable_callback.html","title":"見通しが悪いコールバック","keywords":"","body":"見通しが悪いコールバック Viewに表示させたい情報が多くなってしまった時、コントローラのコールバックが増えがちになってしまうことがある。 class UserController 管理できる数ならいいが、数が多くなってしまった場合コールバックをやめるタイミングかもしれない。 その時の対策としてViewModelクラスを作って対応するといいかもしれない。 class UserController このようにViewに渡すためのデータを管理するクラスを一つ作ることによって、そのクラスを見ればそのビューがどのようにデータを暑かつているかもわかりますし、Viewやcontrollerにロジックを書くことも防ぐことができる。 "},"docs/Rails/refactoring/decorator_class.html":{"url":"docs/Rails/refactoring/decorator_class.html","title":"Viewを知りすぎたDecoratorクラス","keywords":"","body":"Viewを知りすぎたDecoratorクラス ControllerからViewにModelを渡すような場面で、Viewで加工したり結合したりして使っている場合があると思います。デコレーターを使うことによって、その見せ方の責任をデコレータに任せることができます。 そうすることで見せ方を変更したい場合、デコレータークラスを変更するだけでよくなり保守性が上がります。またViewにロジックを書くようなことも抑えることができます。 ちなみにRailsで開発している場合 draper というGemを使うとDecoratorを簡単に実現できます。 draper class UserDecorator 適切に利用すると、保守性をあげることができるのですが、デコレータをビューに依存させてしまうことがあります。開発者はビューで特定の表示がしたいときにデコレータを活用しようとします。なので、気をつけていないと、そのビューに依存しすぎた作りにしてしまうことがあります。 ↓そのケース class UserDecorator #{object.company_name}\" end end class UserController "},"docs/Rails/refactoring/fat.html":{"url":"docs/Rails/refactoring/fat.html","title":"FatView, FatController, FatModel","keywords":"","body":"FatView, FatController, FatModel Railsで単一の責任の原則などのオブジェクト思考の原則を無視して作っていくと、アプリケーションが大きくなるにつれて、モデルやコントローラ、ビューが肥大化し、一つのクラスやメソッドが管理できないほどの役割を持ってしったり、いろいろなコントローラで同じ処理を書いてしまっていたり、いつのまにかViewにロジックいっぱい書いてしまっていたり、といったことが往々にして起こります。そうなると、一つ一つのクラスの役割が大きくなり、変更どころか処理追うのも大変になるようなコードが生まれます。 Railsというフレームワークの上だからといってオブジェクト指向の基本は一緒です。SOLID原則をしっかりと守って設計していかないと後々変更の度に必ず苦労することになるし、テスタビリティが低いコードになってしまいます。テストを書くのが大変になって、これはなんのためにテストしてるんだろうみたいな事になりかねません。 Rails開発で初心者の方に知っておいてほしいのは、ビジネスロジックを追加するためのモデルはActiveRecordだけではないということです。ActiveRecordはActiveRecordパターンとORMの特徴を持つgemであり、永続的なデータと、それに対するロジックを追加するものです。このクラスがすべてのビジネスロジックを請け負うものではありません。モデル層は責務に応じて色々なクラスがあっていいはずです。 Railsには責務分割した上でも使いやすいようにモジュールとしてActiveModelが存在し、ValidatorやCallbackも他のクラスとして切り出せるようにな仕組みが用意されています。 ここでは具体的なクラス分割やアーキテクチャの話まではしませんが、いろいろな記事があるので参考にすると良いと思います。個人的に導入してよかったと思っているのは、以下はよかったなーと思っています。 UI層 view view_object アプリケーション層 controller decorator serializer form ドメイン層 model finder notifier service validator callback parameter 参考までに。 適切なクラス分割が出来ているコードは、変更するコストを下げることができます。取得系のロジックを変えたければfinderクラスを変えればいいですし、通知がメールからSlackになればnotifierクラスを変えればいいだけです。（技術的な関心ごとを直接書かない工夫は必要な場合はあります。それらはlibsにまとめるとか）気をつけて欲しいのは、意味が異なるのに同じような処理をしているからといって、同じクラスを使いまわしてしまうと、変更しづらいコードになってしまいます。 責務の分割はググってこうやるといいらしいで済ませるのは良くありません。本当にそのクラスがその知識を持つべきか、その振る舞いをするべきか、共通の振る舞いをする部分はないか、そこに抽象的なつながりはないかなどをチームとして考えることが大切だと思います。設計はアプリケーションの性質や規模、段階によって異なるため、一般的に使われてるから正しいとかそういったことはなく、どう分割するかを徹底的にチームで考えこみながら進めていくしかないと思います。抽象化したり、共通のロールを見つけたりと、設計はとても楽しいので、ぜひチームであーだこーだ言いながら話合うと良いと思います。 参照 https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc "},"docs/Rails/refactoring/form_service_class.html":{"url":"docs/Rails/refactoring/form_service_class.html","title":"ビジネスロジックの詰まったFormクラス -> Serviceクラスの活用","keywords":"","body":"ビジネスロジックの詰まったFormクラス -> Serviceクラスの活用 参照 Railsで重要なパターンpart 1: Service Object（翻訳） https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc "},"docs/Rails/refactoring/include_dependency_class.html":{"url":"docs/Rails/refactoring/include_dependency_class.html","title":"依存を含んだクラス","keywords":"","body":"依存を含んだクラス 疎結合なコードを書くためには可能な限り依存を少なくする、隔離する努力が必要 ↓依存しまくっているケース class Image def create url = Amazon::S3::Uploader.new(image, name).upload Image.create({url: url, name: name}) end def update url = Amazon::S3::Uploader.new(image, name).upload Image.find(id).update({url: url, name: name}) end end 上のコードはAmazon::S3::Uploaderクラス、Imageクラスに依存しています。UploadeするのをS3から別のクラウドストレージにする場合には複数の箇所を変更しなければならなくなります。２つとかならまだいいですが、その数が大きくなればなるほど変更が大きくなります。結局のところcreateでもupdateでもuploaderはuploadメソッドを持っていることを期待しているので以下のように変更することで、依存範囲を限定することができます。 ↓依存を少なくしたコード class Image def create url = uploader.upload image.create({url: url, name: name}) end def update url = uploader.upload image.update({url: url, name: name}) end def uploader @uploader ||= Amazon::S3::Uploader.new(image, name) end def image @image ||= Image.find(id) end end ↓さらにリファクタリングしたコード class Image def create url = upload image.create({url: url, name: name}) end def update url = upload image.update({url: url, name: name}) end def upload uploader.upload end def uploader @uploader ||= Amazon::S3::Uploader.new(image, name) end def image @image ||= Image.find(id) end end このように依存の範囲を限定することで、変更に対して修正箇所を少なくすることができます。 （全てに対してこのようにすると見通しが悪くなることにもつながるので、そこら辺は臨機応変に） 引数の順番に関する依存 class Image def self.resize(image_path, output_path, x, y) end end Image.resize('./sample.png', './sample-2.png', 300, 400) メッセージを送る側をパッと見て引数のうち何が何を表していることがわからないことです。 引数の順番が変わった時にそれを使っているところをすべて定義し直さないといけない。 そのような場合にはキーワード引数を使うことで回避することができます。 class Image def self.resize(image_path:, output_path:, x:, y:) end end Image.resize(image_path: './sample.png', output_path: './sample-2.png', x: 300, y: 400) 参照 https://qiita.com/shunhikita/items/7fdb5d95c883e38c63fc "},"docs/Rails/rspec/model.html":{"url":"docs/Rails/rspec/model.html","title":"モデルスペック","keywords":"","body":"モデルスペック describe Contact do # 姓と名とメールがあれば有効な状態であること it \"is valid with a firstname, lastname and email\" # 名がなければ無効な状態であること it \"is invalid without a firstname\" # 姓がなければ無効な状態であること it \"is invalid without a lastname\" # メールアドレスがなければ無効な状態であること it \"is invalid without an email address\" # 重複したメールアドレスなら無効な状態であること it \"is invalid with a duplicate email address\" # 連絡先のフルネームを文字列として返すこと it \"returns a contact's full name as a string\" end describe: 期待する結果をまとめて記述する このケースではContactがどんなモデルまたは、どんな振る舞いをするかを記述している。 it: 結果を１つだけ記述している。 細かく分けることによって、もしエラーが発生した場合そこまで細かくみる必要がなくなる。 予測するときはexpect()を使う。 # 2 と 1 を足すと 3 になること it \"adds 2 and 1 to make 3\" do expect(2 + 1).to eq 3 end モデルが有効かどうかを判断するテスト require'rails_helper' describeContactdo # 姓と名とメールがあれば有効な状態であること it \"is valid with a firstname, lastname and email\" do contact = Contact.new( firstname: 'Aaron', lastname: 'Sumner', email: 'tester@example.com') expect(contact).to be_valid end be_validを使ってモデルが有効かどうかを判断している。 モデルテストに参考になりそうな記事 https://qiita.com/shizuma/items/c7b8d7b91e8f325f8ad9 "},"docs/Ruby/1.html":{"url":"docs/Ruby/1.html","title":"Ruby文法","keywords":"","body":"Ruby文法 is_a?()メソット オブジェクトの中身が何かどうか調べてくれる a = [] a.is_a?(Array) # true a.is_a?(Hash) # false "},"docs/Ruby/class_incetance_methos.html":{"url":"docs/Ruby/class_incetance_methos.html","title":"クラスメソットとインスタンスメソットの違い","keywords":"","body":"クラスメソットとインスタンスメソットの違い 参照 ↓ かなり良さそう Rails 初心者から中級者になったと感じたきっかけ インスタンスメソッド内での self の値を調べた "},"docs/Tech_Term/tech_term1.html":{"url":"docs/Tech_Term/tech_term1.html","title":"IT単語","keywords":"","body":"IT 単語 シンボリックリンク (symbolic link) シンボリックリンク (symbolic link)とは UNIX 系の OS（Linux とか）における、ファイルやフォルダの代理人ファイルのこと。 もう少し具体的に書くと UNIX 系の OS において、ファイルやフォルダに対する注文を代わりに受け付けて本来のファイルに中継するのを役目としている「注文受付代行ファイル」のこと です。 Windows の方が得意な人は Windows における「ショートカット」の UNIX 系 OS における呼び名 と解釈しても構いません。 参照 ダンプ(dump) ダンプ (dump)とは 見たい内容をファイルとかに「ぐへぇ（－Ｏ－）＝３」と吐き出すこと です。 "}}